from pyspark.sql.functions import lit

def get_prb_data(vendor, start_days, elptCoreDB, enodes=None, spark=None, markets=[]):
    """
    Fetch hourly PRB data for Ericsson, Samsung, or Nokia.

    :param vendor: Name of the vendor ('ericsson', 'samsung', 'nokia')
    :param start_days: Number of days to look back
    :param elptCoreDB: Database reference
    :param enodes: Optional list of ENODEB values to filter
    :param spark: Spark session
    :param markets: Optional list of market filters
    :return: Spark DataFrame with PRB data
    """
    days = str(start_days)
    
    # Mapping vendors to table names
    vendor_table_map = {
        "ericsson": "airwave_prb_per_branch_raw_v1",
        "samsung": "hourly_samsung_individual_prb_noise_raw_v2",
        "nokia": "hourly_nokia_prb_noise_raw_v2"
    }
    
    if vendor not in vendor_table_map:
        raise ValueError("Invalid vendor name! Choose from 'ericsson', 'samsung', or 'nokia'.")

    table_name = vendor_table_map[vendor]

    market_filter = ""
    if len(markets) > 0:
        market_filter = " AND market in ({})".format(",".join(f"'{m}'" for m in markets))

    # Base query (Ericsson has SECTORCARRIERREF, others do not)
    base_query = f"""
        SELECT *, {'SECTORCARRIERREF,' if vendor == 'ericsson' else ''} 
               SAFE.PARSE_DATE('%m/%d/%Y', day) AS parsed_date
        FROM `{elptCoreDB}.{table_name}`
        WHERE SAFE.PARSE_DATE('%m/%d/%Y', day) >= SAFE.PARSE_DATE('%Y-%m-%d', '{start_days}')
        AND trans_dt >= date_sub(SAFE.PARSE_DATE('%Y-%m-%d', '{start_days}'), INTERVAL {days} DAY)
        {market_filter}
    """

    if vendor == "ericsson":
        # Ensure SECTORCARRIERREF is present and not null
        base_query += " AND (SECTORCARRIERREF IS NOT NULL AND LENGTH(TRIM(SECTORCARRIERREF)) > 0)"

    if enodes:
        enode_filter = " AND TRIM(ENODEB) IN ({})".format(",".join(f"'{e}'" for e in enodes))
        query = base_query + enode_filter
    else:
        query = base_query

    prb_data = spark.read.format("bigquery").load(query)

    # If vendor is NOT Ericsson, add SECTORCARRIERREF with a default value
    if vendor in ["samsung", "nokia"]:
        prb_data = prb_data.withColumn("SECTORCARRIERREF", lit(1))

    return prb_data


new 
def get_prbdata_generic(vendor, start_days, days, elptCoreDB, markets, spark):
    from pyspark.sql.functions import col, lit, concat_ws
    import traceback

    try:
        # Table mapping per vendor
        table_map = {
            "Ericsson": "ericsson_hourly_prb_data",
            "Samsung": "samsung_hourly_prb_data",
            "Nokia": "nokia_hourly_prb_data"
        }

        table_name = table_map.get(vendor)
        if not table_name:
            raise ValueError("Unsupported vendor")

        market_filter = ""
        if markets:
            market_filter = " AND market in ({})".format(",".join(f"'{m}'" for m in markets))

        day_filter = " AND day != 'Total'" if vendor in ["Samsung", "Nokia"] else ""

        base_query = f"""
            SELECT *, {'SECTORCARRIERREF,' if vendor == 'Ericsson' else ''} 
                   SAFE.PARSE_DATE('%m/%d/%Y', day) AS parsed_date
            FROM `{elptCoreDB}.{table_name}`
            WHERE SAFE.PARSE_DATE('%m/%d/%Y', day) >= SAFE.PARSE_DATE('%Y-%m-%d', '{start_days}')
            AND trans_dt >= date_sub(SAFE.PARSE_DATE('%Y-%m-%d', '{start_days}'), INTERVAL {days} DAY)
            {market_filter}
            {day_filter}
        """

        print(f"Running query for {vendor}: {base_query}")
        df = spark.sql(base_query)

        # If SECTORCARRIERREF is not present (Samsung/Nokia), create it
        if 'SECTORCARRIERREF' not in df.columns:
            df = df.withColumn('SECTORCARRIERREF', concat_ws('_', col('eutrancell'), col('carrier')))

        # Ensure rfbranchrx column exists
        if 'rfbranchrx' not in df.columns:
            df = df.withColumn('rfbranchrx', lit(1))

        return df

    except Exception as e:
        print(f"Failed to fetch PRB data for {vendor}: {e}")
        traceback.print_exc()
        return None


new2

def get_prbdata_generic(vendor, start_days, days, elptCoreDB, markets, spark):
    from pyspark.sql.functions import col, lit, concat_ws
    import traceback

    try:
        # Table mapping per vendor
        table_map = {
            "Ericsson": "ericsson_hourly_prb_data",
            "Samsung": "samsung_hourly_prb_data",
            "Nokia": "nokia_hourly_prb_data"
        }

        table_name = table_map.get(vendor)
        if not table_name:
            raise ValueError("Unsupported vendor")

        market_filter = ""
        if markets:
            market_filter = " AND market in ({})".format(",".join(f"'{m}'" for m in markets))

        day_filter = " AND day != 'Total'" if vendor in ["Samsung", "Nokia"] else ""

        base_query = f"""
            SELECT *, {'SECTORCARRIERREF,' if vendor == 'Ericsson' else ''} 
                   SAFE.PARSE_DATE('%m/%d/%Y', day) AS parsed_date
            FROM `{elptCoreDB}.{table_name}`
            WHERE SAFE.PARSE_DATE('%m/%d/%Y', day) >= SAFE.PARSE_DATE('%Y-%m-%d', '{start_days}')
            AND trans_dt >= date_sub(SAFE.PARSE_DATE('%Y-%m-%d', '{start_days}'), INTERVAL {days} DAY)
            {market_filter}
            {day_filter}
        """

        print(f"Running query for {vendor}: {base_query}")
        df = spark.sql(base_query)

        # If SECTORCARRIERREF is not present (Samsung/Nokia), create it
        if 'SECTORCARRIERREF' not in df.columns:
            df = df.withColumn('SECTORCARRIERREF', concat_ws('_', col('eutrancell'), col('carrier')))

        # Ensure rfbranchrx column exists
        if 'rfbranchrx' not in df.columns:
            df = df.withColumn('rfbranchrx', lit(1))

        return df

    except Exception as e:
        print(f"Failed to fetch PRB data for {vendor}: {e}")
        traceback.print_exc()
        return None


new3 

from pyspark.sql.functions import col, lit, when, concat_ws

def get_prb_data_generic(vendor, startdt, enddt, coreDB, enodebs=None, markets=[], spark=None):
    """
    Generic function to fetch and process PRB data for Ericsson, Nokia, and Samsung.
    """
    vendor_map = {
        "Ericsson": {
            "table_name": "ericsson_prb_table",
            "prefix": "eric_avg_iot_prb",
            "invalid_condition": lambda col_val: when((col(col_val) < -30), None),
            "has_sectorcarrierref": True
        },
        "Nokia": {
            "table_name": "nokia_prb_table",
            "prefix": "nok_avg_iot_prb",
            "invalid_condition": lambda col_val: when((col(col_val) < -25) | (col(col_val) > 50), None),
            "has_sectorcarrierref": False
        },
        "Samsung": {
            "table_name": "samsung_prb_table",
            "prefix": "sea_avg_iot_prb",
            "invalid_condition": lambda col_val: when((col(col_val) < -20) | (col(col_val) > 45), None),
            "has_sectorcarrierref": False
        }
    }
    
    if vendor not in vendor_map:
        raise ValueError("Invalid vendor. Choose from 'Ericsson', 'Nokia', or 'Samsung'.")
    
    config = vendor_map[vendor]
    table_name = config["table_name"]
    prefix = config["prefix"]
    invalid_value_handler = config["invalid_condition"]
    has_sectorcarrierref = config["has_sectorcarrierref"]
    
    market_filter = "" if not markets else " AND market in ({})".format(",".join(f"'{m}'" for m in markets))
    
    base_query = f"""
        SELECT *, {'SECTORCARRIERREF,' if has_sectorcarrierref else ''} 
               SAFE.PARSE_DATE('%m/%d/%Y', day) AS parsed_date
        FROM `{coreDB}.{table_name}`
        WHERE SAFE.PARSE_DATE('%m/%d/%Y', day) >= SAFE.PARSE_DATE('%Y-%m-%d', '{startdt}')
        AND trans_dt >= DATE_SUB(SAFE.PARSE_DATE('%Y-%m-%d', '{startdt}'), INTERVAL 7 DAY)
        {market_filter}
        {'AND day != \'Total\'' if vendor in ['Nokia', 'Samsung'] else ''}
    """
    
    prb_data = spark.sql(base_query)
    prb_data = prb_data.dropDuplicates()
    
    # Ensure rfbranchrx column exists for Nokia and Samsung
    if not has_sectorcarrierref:
        prb_data = prb_data.withColumn('rfbranchrx', lit(1))
    
    # Standardize column names
    prb_cols = [c for c in prb_data.columns if prefix in c]
    prb_data = prb_data.select([
        col(c).cast('float').alias(f"{prefix}{int(c.split(prefix)[1])}") if c in prb_cols else col(c)
        for c in prb_data.columns
    ])
    
    # Apply invalid value filtering
    prb_data = prb_data.select([
        invalid_value_handler(c).otherwise(col(c)).alias(c) if c in prb_cols else col(c)
        for c in prb_data.columns
    ])
    
    # Create SECTORCARRIERREF for Ericsson only
    if has_sectorcarrierref:
        prb_data = prb_data.withColumn('SECTORCARRIERREF', concat_ws('_', prb_data.EUTRANCELL, prb_data.CARRIER))
    
    return prb_data





